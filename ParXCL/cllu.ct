.. File: macros.t
.. Macros used by all templates.
..
.. Given a function class 'cl' (e.g. 'setroom_list') and 
.. a function template 'tpl', generate forward declarations
.. with prototypes for all functions that are supposed to be
.. static.
.. The template 'tpl' is supposed to contain '$t' at the appropriate
.. places.
.macro ansi_static cl tpl
.set tl ${excl $(need_$(cl)) "" $(want_$(cl))}
.if ${len $(tl)}
.foreach t $(tl)
static ${eval "$(tpl)"};
.endforeach
.endif
.endmacro
..
.. Given a type `t' representing a Tm type with elements and a list of
.. elements of this type 'el', return a ANSI style function
.. prototype.
.macro ansi_nproto t el
. set tl
. set sep
. foreach e $(el)
.  set tl "$(tl)$(sep)${type $t $e} p_$e"
.  set sep ", "
. endforeach
. if ${== ${len $(tl)} 0}
.  set tl void
. endif
. return "$(tl)"
.endmacro
..
.. Given a type `t' representing a Tm type with elements and a list of
.. elements of this type 'el', return a ANSI style function
.. prototype, suitable for lognew purposes.
.macro ansi_nproto_lognew t el
. set tl
. set sep
. foreach e $(el)
.  set tl "$(tl)$(sep)${type $t $e} p_$e"
.  set sep ", "
. endforeach
. set tl "$(tl)$(sep)const char *_f, const int _l"
. return "$(tl)"
.endmacro
..
.. Given a list name (without the last '_list') return the
.. link name for that list name
.macro linkname nm
.return ${subs ${stemname $(nm)}(*) next\1  $(nm)}
.endmacro
..
.. Given a list of types, ensure that none of these types is
.. virtual and has no subclasses
.macro no_childless_virtual l
.set bad 0
.foreach t $l
.if ${isvirtual $t}
.if $[${len ${subclasses $t}}<1]
.error '$t' is virtual but has no children.
.set bad 1
.endif
.endif
.endforeach
.if $(bad)
.exit 1
.endif
.endmacro
..
.. Given a list of types, ensure that none of these types has
.. multiple inheritance
.macro no_multiple_inheritance l
.set bad 0
.foreach t $l
.if $[${len ${inherits $t}}>1]
.if $(bad)
.else
.error Multiple inheritance not supported in this template.
.set bad 1
.endif
.error $t inherits ${seplist ", " ${inherits $t}}
.endif
.endforeach
.if $(bad)
.exit 1
.endif
.endmacro
..
.. Given a type t, return its root class
.macro rootclass t
.if ${member $t ${typelist}}
.set root ${inherits $t}
.while ${len $(root)}
.set t $(root)
.set root ${inherits $t}
.endwhile
.endif
.return $t
.endmacro
..
.. Apply all aliases, and delete the alias types.
.macro apply_aliases
.foreach t ${aliases}
.set nt ${alias $t}
.. They must be deleted, since they would cause circular definitions
.. complaints. After all, after application each alias
..    told -> tnew;
.. would read:
..    tnew -> tnew;
.deletetype $t
.rename $t $(nt)
.endforeach
.endmacro
.. File: lluid.t
.. Tell need.t that this is for the llu template
.set template llu
.if ${len ${classlist}}
.error Class types not supported: ${seplist ", " ${classlist}}
.exit 1
.endif
.. Tm - an interface code generator.
.. Author: C. van Reeuwijk.
..
.. All rights reserved.
..
.. File: need.t
..
.. Analysis of required code for given set of routines.
.. Given a list of wanted routines and ds definitions in the variable
.. 'wantdefs', construct a list of wanted types for each groups of definitions
.. in the variables 'want_<classlist>', and 'want_<classlist>_list' where
.. <classlist> is an element from the list below. Deduce the contents of the
.. variables 'need_<classlist>'. Using knowledge about the definition of
.. the various routines, deduce the required definitions and set them
.. in the variables 'need_<classlist>'.
..
.. The variables 'need_<classlist>' are restricted to types occurring.
.. For list classes arbitrary types are allowed.
..
.. If the variable 'alldefs' is set, all the variables are simply set to
.. ${typelist}.
..
.. Some initial checks
.set minvers 36
.if ${< $(tmvers) $(minvers)}
. error ${tplfilename}: at least tm version $(minvers) required.
. exit 1
.endif
.call apply_aliases
.set bad 0
.if ${not ${defined basename}}
. error '${tplfilename}': definition of basename required.
. set bad 1
.endif
.if ${and ${not ${defined alldefs}} ${not ${defined wantdefs}}}
. error '${tplfilename}': no definitions specified.
. error At least one of 'alldefs' and 'wantdefs' must be set.
. set bad 1
.endif
..
.if ${not ${defined notwantdefs}}
.set notwantdefs
.endif
..
.. Now check for forbidden field names.
.foreach t ${typelist}
. set fields = ${fields $t}
. if ${member tag $(fields)}
.  error "Error: type $t contains reserved field name 'tag'"
.  set bad 1
. endif
.endforeach
..
.if $(bad)
. exit 1
.endif
..
.. Prefix and suffix used to construct a list type name from a name
.set listpre
.set listsuff _list
..
.. Define the list of definition classes
.set groups      ds cmp isequal new fre rfre rdup print fprint fscan
.. These are only useful for lists.
.set listgroups append concat slice setroom insert delete reverse extract
.append listgroups extractlist insertlist deletelist
.append groups $(listgroups)
.set misccode stat_$(basename) get_balance_$(basename)
.if ${eq $(template) ald}
.append groups null
.endif
.if ${eq $(template) tmc}
.append groups is
.endif
..
.. Reset all want_<groups> variables
.foreach g $(groups) stat
.set want_$g
.endforeach
.set want_misc
..
.if ${defined alldefs}
.. All classes want all types
. foreach g ${excl $(groups) "" $(listgroups)}
.  set want_$g ${ctypelist} ${tuplelist} ${classlist}
. endforeach
. foreach g $(groups)
.  set want_$g ${suffix $(listsuff) ${ctypelist} ${tuplelist} ${classlist}}
. endforeach
. set want_misc $(misccode)
.endif
.set wantdefs ${uniq $(wantdefs)}
.. Extract the contents of the 'want_<group>' variables from the
.. 'wantdefs'.
.. Single defined type names.
.set want_ds ${comm ${typelist} "" $(wantdefs)}
.set wantdefs ${excl $(wantdefs) "" $(want_ds)}
.. Operations on single elements
.foreach g ${rmlist ds $(groups)}
.. Extract all requests starting with $g
. set want_$g ${filt $g_(*) \1 $(wantdefs)}
. set badtypes ${excl ${singletypes $(want_$g)} "" ${typelist}}
. if ${len $(badtypes)}
.  error Don't know how to generate: ${prefix $g_ $(badtypes)}
.  exit 1
. endif
. set wantdefs ${excl $(wantdefs) "" ${prefix $g_ $(want_$g)}}
.endforeach
.. Miscellaneous functions
.set want_misc ${comm $(wantdefs) "" $(misccode)}
.set wantdefs ${excl $(wantdefs) "" $(want_misc)}
.. At this point all functions on lists should have been filtered out..
.. This fact is used below..
.set want_ds_list ${filt (*)_list & $(wantdefs)}
.set wantdefs ${excl $(wantdefs) "" $(want_ds_list)}
.if ${len $(wantdefs)}
. error Cannot handle definition: $(wantdefs)
. exit 1
.endif
..
.. For all wanted new_<t> of virtual types add their inheritors to the
.. want list.
.foreach t $(want_ds)
.if ${isvirtual $t}
.append want_ds "${subclasses $t}"
.endif
.endforeach
.set want_ds ${uniq $(want_ds)}
..
.. Macros to calculate all need variables.
..
.. The following macro invokes a 'req_*' macro. The extra layer allows
.. tracing, weeding out of invocations with empty parameterlists, etc
.if ${defined verbose}
.set reqlevel 0
.macro require g l
.set l ${excl ${uniq $l} "" $(need_$g)}
.if ${len $l}
. globalappend need_$g $l
/* required: ${strpad "" $(reqlevel) "."}${prefix $g_ $l} */
.set reqlevel $[$(reqlevel)+1]
. call req_$g "$l"
.set reqlevel $[$(reqlevel)-1]
.endif
.endmacro
.else
.macro require g l
.set l ${excl ${uniq $l} "" $(need_$g)}
.if ${len $l}
. globalappend need_$g $l
. call req_$g "$l"
.endif
.endmacro
.endif
..
.. The following macros invoke 'require' recursively to ensure that
.. the functions required by their group functions is available.
..
.. ** slice **
.macro req_slice l
.call require rdup "$l"
.call require new "$l"
.call require setroom "$l"
.call require append "$l"
.endmacro
..
.. ** rdup **
.macro req_rdup l
.call require new "${nonvirtual $l}"
.call require setroom "${listtypes $l}"
.call require rdup "${delisttypes $l} ${types $l}"
.if ${eq $(template) tmc}
.call require rdup "${nonvirtual ${reach $l}}"
.else
.call require rdup "${types ${subclasses $l}}"
.call require new "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** fscan **
.macro req_fscan l
.call require new "${nonvirtual $l ${subclasses $l}}"
.call require append "${listtypes $l}"
.call require fscan "${delisttypes $l} ${types ${singletypes $l}}"
.call require fscan "${types ${subclasses $l}}"
.endmacro
..
.. ** print **
.macro req_print l
.call require ds "$l"
.call require print "${delisttypes $l}"
.call require print "${types ${singletypes $l} ${subclasses $l}}"
.if ${eq $(template) tmc}
.call require print "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** fprint **
.macro req_fprint l
.call require ds "$l"
.call require fprint "${delisttypes $l}"
.call require fprint "${types ${singletypes $l} ${subclasses $l}}"
.if ${eq $(template) tmc}
.call require fprint "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** cmp **
.macro req_cmp l
.call require ds "$l"
.call require cmp "${delisttypes $l}"
.call require cmp "${types ${singletypes $l} ${subclasses $l}}"
.if ${eq $(template) tmc}
.call require cmp "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** isequal **
.macro req_isequal l
.call require ds "$l"
.call require isequal "${delisttypes $l}"
.call require isequal "${types ${singletypes $l} ${subclasses $l}}"
.if ${eq $(template) tmc}
.call require isequal "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** append **
.macro req_append l
.call require setroom "$l"
.endmacro
..
.. ** concat **
.macro req_concat l
.call require fre "$l"
.call require setroom "$l"
.endmacro
..
.. ** reverse **
.macro req_reverse l
.call require ds "$l"
.endmacro
..
.. ** insertlist **
.macro req_insertlist l
.call require setroom "$l"
.call require fre "$l"
.endmacro
..
.. ** insert **
.macro req_insert l
.call require setroom "$l"
.endmacro
..
.. ** extractlist **
.macro req_extractlist l
.call require setroom "$l"
.call require new "$l"
.endmacro
..
.. ** extract **
.macro req_extract l
.call require ds "$l"
.endmacro
..
.. ** delete **
.macro req_delete l
.call require rfre "${delisttypes $l}"
.call require ds "$l"
.endmacro
..
.. ** deletelist **
.macro req_deletelist l
.call require rfre "${delisttypes $l}"
.call require ds "$l"
.endmacro
..
.. ** setroom **
.macro req_setroom l
.call require ds "$l"
.endmacro
..
.. ** rfre **
.macro req_rfre l
.call require fre "${nonvirtual $l}"
.call require rfre "${delisttypes $l}"
.call require rfre "${alltypes ${singletypes $l}}"
.if ${eq $(template) tmc}
.call require rfre "${nonvirtual ${subclasses $l}}"
.call require fre "${nonvirtual $l}"
.else
.call require fre "$l"
.call require rfre "${types ${subclasses $l}}"
.endif
.endmacro
..
.. ** null **
.if ${eq $(template) ald}
.macro req_null l
.call require null "${delisttypes $l}"
.call require null "${types ${singletypes $l} ${subclasses $l}}"
.call require ds "$l"
.endmacro
.endif
..
.. ** is **
.if ${eq $(template) tmc}
.macro req_is l
.call require ds "$l"
.endmacro
.endif
..
.. ** fre **
.macro req_fre l
.call require ds "$l"
.if ${eq $(template) tmc}
.call require fre "${nonvirtual ${subclasses $l}}"
.else
.call require stat "${nonvirtual ${subclasses $l}}"
.endif
.call require stat "${nonvirtual $l}"
.endmacro
..
.. ** new **
.macro req_new l
.call require ds "$l"
.call require stat "${nonvirtual $l}"
.if ${neq $(template) tmc}
.call require new "${subclasses ${virtual $l}}"
.endif
.endmacro
..
.. ** stat **
.macro req_stat l
.if ${neq $(template) tmc}
.call require stat "${nonvirtual ${subclasses $l}}"
.endif
.endmacro
..
.. ** ds **
.macro req_ds l
.call require ds "${delisttypes $l}"
.call require ds "${types ${singletypes $l} ${subclasses $l}}"
.if ${eq $(template) tmc}
.call require ds "${subclasses $l} ${superclasses $l}"
.endif
.endmacro
..
.. From the request for new_<virtual class>, deduce the desire for
.. its subclasses.
.. Note that this modifies the *want_new* variable, *not* the need_new
.. variable that is set in the deductions below.
.if ${neq $(template) tmc}
.append want_new "${subclasses ${virtual $(want_new)}}"
.endif
..
.. Reset all need_<group> variables.
.foreach g $(groups) stat
. set need_$g
.endforeach
.set need_misc
..
.. Set all need_<group> variables.
.foreach g $(groups)
. call require $g "$(want_$g)"
.endforeach
.set need_misc $(want_misc)
..
.. Enforce notwantdefs
.set notwantdefs ${uniq $(notwantdefs)}
.if ${len $(notwantdefs)}
. foreach g ${rmlist ds $(groups)}
.  foreach t $(need_$g)
.   if ${member $g_$t $(notwantdefs)}
.    set need_$g ${rmlist $t $(need_$g)}
.    set want_$g ${rmlist $t $(want_$g)}
.   endif
.  endforeach
. endforeach
. foreach t $(need_ds)
.  if ${member $t $(notwantdefs)}
.   set need_ds ${rmlist $t $(need_ds)}
.   set want_ds ${rmlist $t $(want_ds)}
.  endif
. endforeach
. foreach f $(misccode)
.  if ${member $f $(notwantdefs)}
.   set need_misc ${rmlist $f $(need_misc)}
.   set want_misc ${rmlist $f $(want_misc)}
.  endif
. endforeach
.endif
..
.. ** derived definitions **
.set statcode ${or ${member stat_$(basename) $(need_misc)} ${member isbalanced_$(basename) $(need_misc)}}
.if ${not $(statcode)}
.if ${defined verbose}
/* No statistics code needed. */
.endif
. set need_stat
. set want_stat
.endif
..
.. Derive the contents of the want_*_list and need_*_list variables
.. from the want_ and need_ variables
..
.foreach g $(groups) stat
. set want_$g_list ${delisttypes $(want_$g)}
. set want_$g ${singletypes $(want_$g)}
. set need_$g_list ${delisttypes $(need_$g)}
. set need_$g ${comm ${singletypes $(need_$g)} "" ${typelist}}
.endforeach
.set need_ds ${comm $(need_ds) "" ${typelist}}
.if ${defined verbose}
.foreach g $(groups) stat
/* want_$g: $(want_$g) */
/* need_$g: $(need_$g) */
/* want_$g_list: $(want_$g_list) */
/* need_$g_list: $(need_$g_list) */
.endforeach
/* statcode: $(statcode) */
.endif
/* Requirement analysis took ${processortime} milliseconds. */
.. Tm - an interface code generator.
.. Author: C. van Reeuwijk.
..
.. All rights reserved.
..
.. file: cllu.ct
.. Tm C support. Variant: linked lists, union constructors
..
.. The following variables must be set in tm:
.. basename:     the name of the module. used to generate stat_..
.. wantdefs:     the names of the wanted definitions.
..
/*** WARNING: THIS IS GENERATED CODE. ***/

/* ---- start of ${tplfilename} ---- */

/* Routines for '$(basename)'.

   template file:      ${tplfilename}
   datastructure file: ${dsfilename}
   tm version:         $(tmvers)
   tm kernel version:  $(kernel-version)
 */

static char tm_srcfile[] = __FILE__;

/* Error strings. */
.if ${len $(need_fscan_list)}
static char tm_badeof[] = "unexpected end of file";
.endif
.if ${len ${comm $(need_fscan) "" ${ctypelist}}}
static char tm_badcons[] = "bad constructor for %s: '%s'";
.endif

#ifndef FATALTAG
#define FATALTAG(tag) tm_badtag(tm_srcfile,__LINE__,(int) tag)
#endif

.if ${len $(need_stat) $(need_stat_list)}
.foreach t ${nonvirtual $(need_stat)}
.if ${member $t ${tuplelist}}
static long int newcnt_$t = 0, frecnt_$t = 0;
.else
static long int newcnt_$t = 0, frecnt_$t = 0;
.foreach c ${nonvirtual ${subclasses $t}}
static long int newcnt_$c = 0, frecnt_$c = 0;
.endforeach
.endif
.endforeach
.foreach t $(need_stat_list)
static long int newcnt_$t_list = 0, frecnt_$t_list = 0;
.endforeach
.endif

/************************************************
 *    new_<type> and new_<tuple> routines       *
 ************************************************/

#ifdef LOGNEW
.foreach t $(need_new)
.if ${member $t $(want_new)}
#undef new_$t
.endif
#define new_$t(${seplist , ${allfields $t}}) real_new_$t(${seplist , ${allfields $t} _f _l})
.endforeach
#endif

.if ${len ${virtual $(need_new)}}
/* virtual: ${prefix new_ ${virtual $(need_new)}} */

.endif
.foreach t ${nonvirtual $(need_new)}
.if ${member $t $(want_new)}
.set stat
.else
.set stat "static "
.endif
/* Allocate a new instance of ${metatype $t} '$t'. */
.switch ${metatype $t}
.case tuple class constructorbase
#ifdef LOGNEW
.set tl ${call ansi_nproto_lognew $t "${allfields $t}" }
$(stat)$t real_new_$t( $(tl) )
#else
.set tl ${call ansi_nproto $t "${allfields $t}" }
$(stat)$t new_$t( $(tl) )
#endif
{
    $t nw;

    nw = TM_MALLOC( $t, sizeof(*nw) );
.. Zero all 'next' pointers for all necessary list levels
.set links ${filt $t(*) next\1 $(need_ds_list)}
.foreach link $(links)
    nw->$(link) = ${subs next(*) $t\1 $(link)}_listNIL;
.endforeach
.foreach e ${allfields $t}
    nw->$e = p_$e;
.endforeach
.if ${member $t $(need_stat)}
    newcnt_$t++;
.endif
#ifdef LOGNEW
    nw->lognew_id = tm_new_logid( _f, _l );
#endif
    return nw;
}
.case constructor
#ifdef LOGNEW
.set tl ${call ansi_nproto_lognew $t "${allfields $t}" }
$(stat)${inherits $t} real_new_$t( $(tl) )
#else
.set tl ${call ansi_nproto $t "${allfields $t}" }
$(stat)${inherits $t} new_$t( $(tl) )
#endif
{
    ${inherits $t} nw;

    nw = TM_MALLOC( ${inherits $t}, sizeof(*nw) );
.. Zero all 'next' pointers for all necessary list levels
.set links ${filt $t(*) next\1 $(need_ds_list)}
.foreach link $(links)
    nw->$(link) = ${subs next(*) $t\1 $(link)}_listNIL;
.endforeach
.foreach e ${allfields $t}
    to_$t(nw)->$e = p_$e;
.endforeach
    nw->tag = TAG$t;
.if ${member $t $(need_stat)}
    newcnt_$t++;
.endif
#ifdef LOGNEW
    nw->lognew_id = tm_new_logid( _f, _l );
#endif
    return nw;
}
.endswitch

.endforeach

.foreach t $(need_new_list)
.if ${member $t $(want_new_list)}
.set stat
.else
.set stat "static "
.endif
/* Create a list of $t elements. */
$(stat)$t_list new_$t_list( void )
{
.if ${member $t $(need_stat_list)}
    newcnt_$t_list++;
.endif
    return $t_listNIL;
}

.endforeach
/**********************************************************
 *    fre_<type> and fre_<type>_list routines             *
 **********************************************************/

.foreach t $(need_fre)
.if ${member $t $(want_fre)}
.set stat
.else
.set stat "static "
.endif
/* Free an element of ${metatype $t} '$t'. */
$(stat)void fre_$t( $t e )
{
    if( e == $tNIL ){
	return;
    }
#ifdef LOGNEW
    tm_fre_logid( e->lognew_id );
#endif
.if ${member $t $(need_stat)}
    frecnt_$t++;
.endif
.if ${member $t ${tuplelist}}
.else
.if ${len ${nonvirtual ${subclasses $t}}}
    switch( e->tag ){
.foreach c ${nonvirtual ${subclasses $t}}
.if ${member $c $(need_stat)}
	case TAG$c:
	    frecnt_$c++;
	    break;

.endif
.endforeach
	default:
	    FATALTAG( e->tag );
    }
.endif
.endif
    TM_FREE( e );
}

.endforeach
.foreach t $(need_fre_list)
.if ${member $t $(want_fre_list)}
.set stat
.else
.set stat "static "
.endif
/* free a list of $t elements */
$(stat)void fre_$t_list( $t_list e )
{
    (void) e;
.if ${member $t $(need_stat_list)}
    frecnt_$t_list++;
.endif
}

.endforeach
/**********************************************************
 *    rfre_<type> and rfre_<type>_list routines           *
 **********************************************************/

.call ansi_static rfre_list "void rfre_$$t_list( $$t_list )"
.call ansi_static rfre "void rfre_$$t( $$t )"

.foreach t $(need_rfre)
.if ${member $t $(want_rfre)}
.set stat
.else
.set stat "static "
.endif
/* Recursively free an element of ${metatype $t} type '$t'
   and all elements in it.
 */
$(stat)void rfre_$t( $t e )
{
    if( e == $tNIL ){
	return;
    }
.if ${member $t ${tuplelist}}
.foreach e ${allfields $t}
    rfre_${type $t $e}( e->$e );
.endforeach
.else
.if ${len ${subclasses $t}}
    switch( e->tag ){
.foreach c ${subclasses $t}
	case TAG$c:
.foreach e ${allfields $c}
	    rfre_${type $c $e}( to_$c(e)->$e );
.endforeach
	    break;

.endforeach
	default:
	    FATALTAG( e->tag );
    }
.endif
.endif
    fre_$t( e );
}

.endforeach
.foreach t $(need_rfre_list)
.if ${member $t $(want_rfre_list)}
.set stat
.else
.set stat "static "
.endif
/* Recursively free a list of elements of type $t. */
$(stat)void rfre_$t_list( $t_list l )
{
    $t_list n;

    fre_$t_list( l );
    while( l!=$t_listNIL ){
	n = l->${call linkname $t};
	rfre_$t( l );
	l = n;
    }
}

.endforeach
/************************************************
 *    append_<type>_list routines               *
 ************************************************/

.call ansi_static append_list "$$t_list append_$$t_list( $$t_list, $$t )"
.foreach t $(need_append_list)
.if ${member $t $(want_append_list)}
.set stat
.else
.set stat "static "
.endif
/* Append $t 'b' after list of $t 'a'. */
$(stat)$t_list append_$t_list( $t_list a, $t b )
{
    $t tl = a;

    b->${call linkname $t} = $tNIL;
    if( tl == $tNIL ){
	return b;
    }
    while( tl->${call linkname $t} != $tNIL ) tl = tl->${call linkname $t};
    tl->${call linkname $t} = b;
    return a;
}

.endforeach
/************************************************
 *    Concatenate routines                      *
 ************************************************/

.foreach t $(need_concat_list)
.if ${member $t $(want_concat_list)}
.set stat
.else
.set stat "static "
.endif
/* Concatenate $t_list 'b' after $t_list 'a'. */
$(stat)$t_list concat_$t_list( $t_list a, $t_list b )
{
    $t tl;

.if ${member $t $(need_stat_list)}
    frecnt_$t_list++;
.endif
    if( a == $tNIL ){
	return b;
    }
    tl = a;
    while( tl->${call linkname $t} != $tNIL ) tl = tl->${call linkname $t};
    tl->${call linkname $t} = b;
    return a;
}

.endforeach
/************************************************
 *    reverse_<type>_list routines               *
 ************************************************/

.foreach t $(need_reverse_list)
.if ${member $t $(want_reverse_list)}
.set stat
.else
.set stat "static "
.endif
/* Reverse the elements in 'l'. */
$(stat)$t_list reverse_$t_list( $t_list l )
{
    $t_list next;
    $t_list nl;

    nl = $t_listNIL;
    while( l!=$t_listNIL ){
	next = l->${call linkname $t};
	l->${call linkname $t} = nl;
	nl = l;
	l = next;
    }
    return nl;
}

.endforeach
.if ${len $(need_insert_list)}
/************************************************
 *    insert_<type>_list routines               *
 ************************************************/

.foreach t $(need_insert_list)
.if ${member $t $(want_insert_list)}
.set stat
.else
.set stat "static "
.endif
/* Insert element 'e' at position 'p' in list 'l'. */
$(stat)$t_list insert_$t_list( $t_list l, const unsigned int p, $t e )
{
    $t_list nl;

    if( l == $t_listNIL ){
	e->${call linkname $t} = $t_listNIL;
	return e;
    }
    if( p == 0 ){
	e->${call linkname $t} = l;
	nl = e;
    }
    else {
	nl = insert_$t_list( l, (p-1), e );
    }
    return nl;
}

.endforeach
.endif
.if ${len $(need_insertlist_list)}
/************************************************
 *    insertlist_<type>_list routines           *
 ************************************************/

.foreach t $(need_insertlist_list)
.if ${member $t $(want_insertlist_list)}
.set stat
.else
.set stat "static "
.endif
/* Insert list 'lb' at position 'p' in list 'la'. */
$(stat)$t_list insertlist_$t_list( $t_list la, unsigned int p, $t_list lb )
{
    $t_list res = la;
    $t_list *stitch = &res;
    unsigned int cnt;

    for( cnt=0; cnt<p && (la!=0); cnt++ ){
	stitch = &la->${call linkname $t};
	la = *stitch;
    }
    /* '*stitch' now points to the place where lb must be linked in. */
    *stitch = lb;
    while( lb != 0 ){
	stitch = &lb->${call linkname $t};
	lb = *stitch;
    }
    /* '*stitch' now points to the place where the tail of la must be
     * linked in.
     */
    *stitch = la;
    return res;
}

.endforeach
.endif
.if ${len $(need_delete_list)}
/************************************************
 *    delete_<type>_list routines               *
 ************************************************/

.call ansi_static delete_list "$$t_list delete_$$t_list( $$t_list, const unsigned int )"
.foreach t $(need_delete_list)
.if ${member $t $(want_delete_list)}
.set stat
.else
.set stat "static "
.endif
/* Delete element at position 'p' in list 'l'. */
$(stat)$t_list delete_$t_list( $t_list l, const unsigned int p )
{
    $t_list res = l;
    $t_list *prev = &res;
    unsigned int ix;

    for( ix=0; ix<p; ix++ ){
	if( l == $t_listNIL ){
	    return res;
	}
	prev = &l->${call linkname $t};
	l = l->${call linkname $t};
    }
    (*prev) = l->${call linkname $t};
    rfre_$t( l );
    return res;
}

.endforeach
.endif
.if ${len $(need_deletelist_list)}
/************************************************
 *    deletelist_<type>_list routines               *
 ************************************************/

.call ansi_static deletelist_list "$$t_list deletelist_$$t_list( $$t_list, unsigned int, unsigned int )"
.foreach t $(need_deletelist_list)
.if ${member $t $(want_deletelist_list)}
.set stat
.else
.set stat "static "
.endif
/* delete elements at positions 'from' to 'to' in list 'l'. */
$(stat)$t_list deletelist_$t_list( $t_list l, const unsigned int from, unsigned int to )
{
    $t_list res = l;
    $t_list *prev = &res;
    unsigned int n;
    unsigned int ix;

    if( from>to ){
	return l;
    }
    for( ix=0; ix<from; ix++ ){
	if( l == $t_listNIL ){
	    return res;
	}
	prev = &l->${call linkname $t};
	l = l->${call linkname $t};
    }
    for( n=from; n<to; n++ ){
	$t_list nl;

	if( l == $t_listNIL ){
	    break;
	}
	nl = (*prev) = l->${call linkname $t};
	rfre_$t( l );
	l = nl;
    }
    return res;
}

.endforeach
.endif
.if ${len $(need_extract_list)}
/************************************************
 *    extract_<type>_list routines               *
 ************************************************/

.call ansi_static extract_list "$$t_list extract_$$t_list( $$t_list, const unsigned int, $t *, int * )"
.foreach t $(need_extract_list)
.if ${member $t $(want_extract_list)}
.set stat
.else
.set stat "static "
.endif
/* Delete element at position 'p' in list 'l'. */
$(stat)$t_list extract_$t_list(
    $t_list l,
    const unsigned int p,
    $t *e,
    int *valid
)
{
    $t_list nl;

    if( l == $t_listNIL ){
	*valid = 0;
	return l;
    }
    if( p == 0 ){
	nl = l->${call linkname $t};
	l->${call linkname $t} = $tNIL;
	*valid = 1;
	*e = l;
    }
    else {
	nl = l;
	nl->${call linkname $t} = extract_$t_list( l->${call linkname $t}, p-1, e, valid );
    }
    return nl;
}

.endforeach
.endif
.if ${len $(need_extractlist_list)}
/************************************************
 *    extractlist_<type>_list routines               *
 ************************************************/

.call ansi_static extractlist_list "$$t_list extractlist_$$t_list( $$t_list, unsigned int, unsigned int, $t_list *  )"
.foreach t $(need_extractlist_list)
.if ${member $t $(want_extractlist_list)}
.set stat
.else
.set stat "static "
.endif
/* Given a list 'l' and a range 'from' to 'to', extract the elements
 * in the given range to a new list '*e', and stitch up the remaining
 * elements into a shorter list.
 *
 * If part of the specified range is not in the list, it is silently shortened.
 */
$(stat)$t_list extractlist_$t_list(
    $t_list l,
    unsigned int from,
    unsigned int to,
    $t_list *e
)
{
    $t_list res = l;
    $t_list *stitch = &res;
    unsigned int cnt;
    $t_list *lnk = e;

    for( cnt=0; cnt<from && (l != 0); cnt++ ){
	stitch = &l->${call linkname $t};
	l = *stitch;
    }
    /* '*stitch' now points to the place where the tail must be linked in.
     * 'l' now points to the first element of the range to be extracted.
     */
    *e = l;
    for( ; cnt<to && (l != 0); cnt++ ){
	lnk = &l->${call linkname $t};
	l = *lnk;
    }
    /* '*lnk' now points to the place where the extracted list must be
     * terminated.
     */
    *lnk = $t_listNIL;
    *stitch = l;
    return res;
}

.endforeach
.endif
/******************************************************
 *    print_<type> and print_<type>_list routines     *
 ******************************************************/

.. Forward declarations
.call ansi_static print_list "void print_$$t_list( TMPRINTSTATE *st, const $$t_list )"
.call ansi_static print "void print_$$t( TMPRINTSTATE *st, const $$t )"
.foreach t ${depsort $(need_print)}
.set stic_$t "static "
.endforeach
.foreach t $(want_print)
.set stic_$t
.endforeach
.foreach t $(need_print)
/* Print an element 't' of type '$t'
   using print optimizer.
 */
$(stic_$t)void print_$t( TMPRINTSTATE *st, const $t t )
{
    if( t == $tNIL ){
	tm_printword( st, "@" );
	return;
    }
.switch ${metatype $t}
.case tuple
    tm_opentuple( st );
.foreach e ${allfields $t}
    print_${type $t $e}( st, t->$e );
.endforeach
    tm_closetuple( st );
.case class constructorbase
    tm_opencons( st );
.if ${len ${nonvirtual ${subclasses $t}}}
    switch( t->tag ){
.foreach c ${nonvirtual ${subclasses $t}}
	case TAG$c:
	    tm_printword( st, "$c" );
.foreach e ${allfields $c}
	    print_${type $c $e}( st, to_$c(t)->$e );
.endforeach
	    break;

.endforeach
	default:
	    FATALTAG( t->tag );
    }
.endif
    tm_closecons( st );
.case constructor
.error Internal botch: print_$t requested, but $t is a constructor.
.endswitch
}

.endforeach
.foreach t $(need_print_list)
.if ${member $t $(want_print_list)}
.set stat
.else
.set stat "static "
.endif
/* Print list of elements of type '$t'
 * using print optimization routines.
 */
$(stat)void print_$t_list( TMPRINTSTATE * st, const $t_list l )
{
    $t_list p = l;

    tm_openlist( st );
    while( p!=$tNIL ){
	print_$t( st, p );
	p = p->${call linkname $t};
    }
    tm_closelist( st );
}

.endforeach
/*********************************************************
 *    fprint_<type> and fprint_<type>_list routines      *
 *********************************************************/

.call ansi_static fprint_list "void fprint_$$t_list( FILE *, const $$t_list )"
.call ansi_static fprint "void fprint_$$t( FILE *, const $$t )"
.foreach t $(need_fprint)
.if ${member $t $(want_fprint)}
.set stat
.else
.set stat "static "
.endif
/* Print an element of type '$t' to file 'f' */
$(stat)void fprint_$t( FILE *f, const $t t )
{
    if( t == $tNIL ){
	(void) fputs( "@ ", f );
	return;
    }
.if ${member $t ${tuplelist}}
    (void) putc( '(', f );
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    (void) fputs( ",\n", f );
.endif
    fprint_${type $t $e}( f, t->$e );
.endforeach
    (void) fputs( ")\n", f );
.else
    (void) putc( '(', f );
.if ${len ${subclasses $t}}
    switch( t->tag ){
.foreach c ${subclasses $t}
	case TAG$c:
	    (void) fputs( "$c", f );
.foreach e ${allfields $c}
	    (void) putc( ' ', f );
	    fprint_${type $c $e}( f, to_$c(t)->$e );
.endforeach
	    break;

.endforeach
	default:
	    FATALTAG( t->tag );
    }
.endif
    (void) fputs( ")\n", f );
.endif 
}

.endforeach
.foreach t $(need_fprint_list)
.if ${member $t $(want_fprint_list)}
.set stat
.else
.set stat "static "
.endif
/* Print list of elements of type '$t' to file 'f' */
$(stat)void fprint_$t_list( FILE *f, const $t_list l )
{
    $t_list p = l;

    (void) putc( '[', f );
    while( p!=$t_listNIL ){
	fprint_$t( f, p );
	p = p->${call linkname $t};
	if( p!=$tNIL ){
	    (void) putc( ',', f );
	}
    }
    (void) fputs( "]\n", f );
}

.endforeach
/*********************************************************
 *    rdup_<type> and rdup_<type>_list routines          *
 *********************************************************/

#ifdef LOGNEW
.foreach t $(need_rdup)
.if ${member $t $(want_rdup)}
#undef rdup_$t
.endif
#define rdup_$t(e) real_rdup_$t(e,_f,_l)
.endforeach
.foreach t $(need_rdup_list)
.if ${member $t $(want_rdup_list)}
#undef rdup_$t_list
.endif
#define rdup_$t_list(l) real_rdup_$t_list(l,_f,_l)
.endforeach
.. Forward declarations
.call ansi_static rdup_list "$$t_list real_rdup_$$t_list( const $$t_list l, const char *_f, const int _l )"
.call ansi_static rdup "$$t real_rdup_$$t( const $$t e, const char *_f, const int _l )"
#else
.call ansi_static rdup_list "$$t_list rdup_$$t_list( const $$t_list )"
.call ansi_static rdup "$$t rdup_$$t( const $$t )"
#endif
.foreach t $(need_rdup)
.if ${member $t $(want_rdup)}
.set stat
.else
.set stat "static "
.endif
/* Recursively duplicate instance `e' of type `$t'
 * and all elements in it.
 */
#ifdef LOGNEW
$(stat)$t real_rdup_$t( const $t e, const char *_f, const int _l )
#else
$(stat)$t rdup_$t( const $t e )
#endif
{
.if ${member $t ${tuplelist}}
.foreach e ${allfields $t}
    ${type $t $e} i_$e;
.endforeach

    if( e == $tNIL ){
	return $tNIL;
    }
.foreach e ${allfields $t}
    i_$e = rdup_${type $t $e}( e->$e );
.endforeach
    return new_$t( ${seplist ", " ${prefix "i_" ${allfields $t}}} );
.else
    if( e == $tNIL ){
	return $tNIL;
    }
.if ${len ${subclasses $t}}
    switch( e->tag ){
.foreach c ${subclasses $t}
	case TAG$c:
	{
.foreach e ${allfields $c}
	    ${type $c $e} i_$e;
.endforeach

.foreach e ${allfields $c}
	    i_$e = rdup_${type $c $e}( to_$c(e)->$e );
.endforeach
	    return new_$c( ${seplist ", " ${prefix "i_" ${allfields $c}}} );
	}

.endforeach
	default:
	    FATALTAG( e->tag );
    }
.else
#ifdef LOGNEW
    (void) _f;
    (void) _l;
#endif
.endif
    return $tNIL;
.endif
}

.endforeach
.foreach t $(need_rdup_list)
.if ${member $t $(want_rdup_list)}
.set stat
.else
.set stat "static "
.endif
/* Recursively duplicate an instance of a `$t' list. */
#ifdef LOGNEW
$(stat)$t_list real_rdup_$t_list( const $t_list p_e, const char *_f, const int _l )
#else
$(stat)$t_list rdup_$t_list( const $t_list p_e )
#endif
{
    $t_list nw;
    $t_list po;
    $t_list *pn;

    po = p_e;
    pn = &nw;
    while( po != $t_listNIL ){
	*pn = rdup_$t( po );
	pn = &((*pn)->${call linkname $t});
	po = po->${call linkname $t};
    }
    *pn = $t_listNIL;
.if ${member $t $(need_stat_list)}
    newcnt_$t_list++;
.endif
    return nw;
}

.endforeach
/*********************************************************
 *    slice_<type> and slice_<type>_list routines        *
 *********************************************************/

#ifdef LOGNEW
.foreach t $(need_slice_list)
.if ${member $t $(want_slice_list)}
#undef slice_$t_list
.endif
#define slice_$t_list(l,b,e) real_slice_$t_list(l,b,e,_f,_l)
.endforeach
#endif

.foreach t $(need_slice_list)
.if ${member $t $(want_slice_list)}
.set stat
.else
.set stat "static "
.endif
/* Recursively duplicate instances 'b' to 'e' of $t_list 'l'. */
#ifdef LOGNEW
$(stat)$t_list real_slice_$t_list(
    const $t_list parm_l,
    const unsigned int parm_b,
    const unsigned int parm_e,
    const char *_f,
    const int _l
)
#else
$(stat)$t_list slice_$t_list(
    const $t_list parm_l,
    const unsigned int parm_b,
    const unsigned int parm_e
)
#endif
{
    $t_list l = parm_l;
    $t_list nl;
    unsigned int b = parm_b;
    unsigned int e = parm_e;

    if( b>=e ){
	return new_$t_list();
    }
    while( b!=0 && l != $t_listNIL ){
	b--;
	e--;
	l = l->${call linkname $t};
    }
    if( l == $t_listNIL ){
	return new_$t_list();
    }
    nl = rdup_$t( l );
    nl->${call linkname $t} = slice_$t_list( l->${call linkname $t}, 0, (e-1) );
    return nl;
}

.endforeach
/*********************************************************
 *    cmp_<type> and cmp_<type>_list routines            *
 *********************************************************/

.call ansi_static cmp_list "int cmp_$$t_list( const $$t_list, const $$t_list )"
.call ansi_static cmp "int cmp_$$t( const $$t, const $$t )"

.foreach t $(need_cmp)
.if ${member $t $(want_cmp)}
.set stat
.else
.set stat "static "
.endif
.if ${member $t ${tuplelist}}
.. cmp tuple
/* Compare two $t tuples. */
$(stat)int cmp_$t( const $t a, const $t b )
{
    int res;

    res = 0;
.. A small optimization, but also takes care of NIL.
    if( a == b ){
	return res;
    }
    if( a == $tNIL ){
	return -1;
    }
    if( b == $tNIL ){
	return 1;
    }
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    if( res != 0 ){
	return res;
    }
.endif
    res = cmp_${type $t $e}( a->$e, b->$e );
.endforeach
    return res;
}

.else
.. cmp constructor
/* Compare two $t constructors */
$(stat)int cmp_$t( const $t a, const $t b )
{
    int res;

.. A small optimization, but also takes care of NIL.
    if( a == b ){
	return 0;
    }
    if( a == $tNIL ){
	return -1;
    }
    if( b == $tNIL ){
	return 1;
    }
.if ${len ${subclasses $t}}
    res = ((int) a->tag - (int) b->tag);
    if( res != 0 ){
	return res;
    }
    switch( a->tag )
    {
.foreach c ${subclasses $t}
	case TAG$c:
.set first 1
.foreach e ${allfields $c}
.if $(first)
.set first 0
.else
	    if( res != 0 ){
		break;
	    }
.endif
	    res = cmp_${type $c $e}( to_$c(a)->$e, to_$c(b)->$e );
.endforeach
	    break;

.endforeach
	    default:
		FATALTAG( a->tag );
    }
.else
    res = 0;
.endif
    return res;
}

.endif
.endforeach
.foreach t $(need_cmp_list)
.if ${member $t $(want_cmp_list)}
.set stat
.else
.set stat "static "
.endif
/* Compare two $t lists. */
$(stat)int cmp_$t_list( const $t_list a, const $t_list b )
{
    int res;
    $t_list ap = a;
    $t_list bp = b;

    while( (ap!=$tNIL) || (bp!=$tNIL) ){
	if( ap==$tNIL ){
	    return -1;
	}
	if( bp==$tNIL ){
	    return 1;
	}
	res = cmp_$t( ap, bp );
	if( res != 0 ){
	    return res;
	}
	ap = ap->${call linkname $t};
	bp = bp->${call linkname $t};
    }
    return 0;
}

.endforeach
/*********************************************************
 *    isequal_<type> and isequal_<type>_list routines            *
 *********************************************************/

.call ansi_static isequal_list "tmbool isequal_$$t_list( const $$t_list, const $$t_list )"
.call ansi_static isequal "tmbool isequal_$$t( const $$t, const $$t )"

.foreach t $(need_isequal)
.if ${member $t $(want_isequal)}
.set stat
.else
.set stat "static "
.endif
.if ${member $t ${tuplelist}}
.. isequal tuple
/* Compare two $t tuples. */
$(stat)tmbool isequal_$t( const $t a, const $t b )
{
.. A small optimization, but also takes care of NIL.
    if( a == b ){
	return TMTRUE;
    }
    if( a == $tNIL || b == $tNIL ){
	return TMFALSE;
    }
.foreach e ${allfields $t}
    if( !isequal_${type $t $e}( a->$e, b->$e ) ){
	return TMFALSE;
    }
.endforeach
    return TMTRUE;
}

.else
.. isequal constructor
/* Compare two $t constructors */
$(stat)tmbool isequal_$t( const $t a, const $t b )
{
.. A small optimization, but also takes care of NIL.
    if( a == b ){
	return TMTRUE;
    }
    if( a == $tNIL || b == $tNIL ){
	return TMFALSE;
    }
.if ${len ${subclasses $t}}
    if( a->tag != b->tag ){
	return TMFALSE;
    }
    switch( a->tag )
    {
.foreach c ${subclasses $t}
	case TAG$c:
.foreach e ${allfields $c}
	    if( !isequal_${type $c $e}( to_$c(a)->$e, to_$c(b)->$e ) ){
		return TMFALSE;
	    }
.endforeach
	    break;

.endforeach
	    default:
		FATALTAG( a->tag );
    }
.endif
    return TMTRUE;
}

.endif
.endforeach
.foreach t $(need_isequal_list)
.if ${member $t $(want_isequal_list)}
.set stat
.else
.set stat "static "
.endif
/* Compare two $t lists. */
$(stat)tmbool isequal_$t_list( const $t_list a, const $t_list b )
{
    $t_list ap = a;
    $t_list bp = b;

    for(;;){
	if( ap == bp ){
	    break;
	}
	if( ap==$tNIL || bp==$tNIL ){
	    return TMFALSE;
	}
	if( !isequal_$t( ap, bp ) ){
	    return TMFALSE;
	}
	ap = ap->${call linkname $t};
	bp = bp->${call linkname $t};
    }
    return TMTRUE;
}

.endforeach
/*********************************************************
 *    fscan_<type> and fscan_<type>_list routines        *
 *********************************************************/

#ifdef LOGNEW
.foreach t $(need_fscan)
.if ${member $t $(want_fscan)}
#undef fscan_$t
.endif
#define fscan_$t(f,ep) real_fscan_$t(f,ep,_f,_l)
.endforeach
.foreach t $(need_fscan_list)
.if ${member $t $(want_fscan_list)}
#undef fscan_$t_list
.endif
#define fscan_$t_list(f,lp) real_fscan_$t_list(f,lp,_f,_l)
.endforeach
.. Forward declarations
.call ansi_static fscan_list "int real_fscan_$$t_list( FILE *, $$t_list *, const char *_f, const int _l )"
.call ansi_static fscan "int real_fscan_$$t( FILE *, $$t *, const char *_f, const int _l )"
#else
.call ansi_static fscan_list "int fscan_$$t_list( FILE *, $$t_list * )"
.call ansi_static fscan "int fscan_$$t( FILE *, $$t * )"
#endif
.foreach t $(need_fscan)
.if ${member $t $(want_fscan)}
.set stat
.else
.set stat "static "
.endif
/* Read a ${metatype $t} of type '$t' from file 'f',
   and create an instance of a C structure for it.
   Set '*p' to this new structure.
 */
#ifdef LOGNEW
$(stat)int real_fscan_$t( FILE *f, $t *p, const char *_f, const int _l )
#else
$(stat)int fscan_$t( FILE *f, $t *p )
#endif
{
.switch ${metatype $t}
.case tuple
.foreach e ${allfields $t}
    ${type $t $e} l_$e;
.endforeach
    int c;
    int err;

.foreach e ${allfields $t}
    l_$e = ${type $t $e}NIL;
.endforeach
    *p = $tNIL;
    if( tm_fscanspace( f ) ){
        return 1;
    }
    c = getc( f );
    if( c == '@' ){
	return 0;
    }
    (void) ungetc( c, f );
    err = tm_fneedc( f, '(' );
    if( err ){
	return 1;
    }
.set first 1
.foreach e ${allfields $t}
.if $(first)
.set first 0
.else
    if( !err ){
	err = tm_fneedc( f, ',' );
    }
.endif
    if( fscan_${type $t $e}( f, &l_$e ) ){
	return 1;
    }
.endforeach
    *p = new_$t( ${seplist ", " ${prefix " l_" ${allfields $t}}} );
    if( err ){
	return 1;
    }
    return tm_fneedc( f, ')' );
.case constructorbase class
    int n;
    int c;
.. Determine the length of the largest constructor name.
.set maxlen 0
.foreach c ${nonvirtual $t ${subclasses $t}}
.set maxlen ${max $(maxlen) ${strlen $c}}
.endforeach
.. Add some space for '\0' and safety..
.set maxlen $[$(maxlen)+4]
    char tm_word[$(maxlen)];	/* Longest constructor name should fit. */
    int err = 0;

.if ${not ${len ${nonvirtual $t ${subclasses $t}}}}
#ifdef LOGNEW
    (void) _f;
    (void) _l;
#endif
.endif
    *p = $tNIL;
    n = tm_fscanopenbrac( f );
    if( tm_fscanspace( f ) ){
        return 1;
    }
    c = getc( f );
    if( c == '@' ){
	return tm_fscanclosebrac( f, n );
    }
    (void) ungetc( c, f );
    if( tm_fscancons( f, tm_word, $(maxlen) ) ){
	return 1;
    }
.. First time in loop there should be no 'else' before the if,
.. in all other cases there should.
.set els
.if ${isvirtual $t}
.else
    $(els)if( strcmp( tm_word, "$t" ) == 0 ){
.foreach e ${allfields $t}
	${type $t $e} l_$e;
.endforeach

.foreach e ${allfields $t}
	l_$e = ${type $t $e}NIL;
	if( !err ){
	    err = fscan_${type $t $e}( f, &l_$e );
	}
.endforeach
	*p = new_$t( ${seplist ", " ${prefix " l_" ${allfields $t}}} );
    }
.set els "else "
.endif
.foreach c ${nonvirtual ${subclasses $t}}
    $(els)if( strcmp( tm_word, "$c" ) == 0 ){
.foreach e ${allfields $c}
	${type $c $e} l_$e;
.endforeach

.foreach e ${allfields $c}
	l_$e = ${type $c $e}NIL;
	if( !err ){
	    err = fscan_${type $c $e}( f, &l_$e );
	}
.endforeach
	*p = new_$c( ${seplist ", " ${prefix " l_" ${allfields $c}}} );
    }
.set els "else "
.endforeach
    else {
	(void) sprintf( tm_errmsg, tm_badcons, "$t", tm_word );
	err = 1;
    }
    if( err ){
	return 1;
    }
    return tm_fscanclosebrac( f, n );
.case constructor
.error Internal botch: fscan_$t requested
.endswitch
}

.endforeach
.foreach t $(need_fscan_list)
.if ${member $t $(want_fscan_list)}
.set stat
.else
.set stat "static "
.endif
/* Read an instance of a list of datastructure of type $t.
   from file 'f' and allocate space for it. Set the pointer 'p' to
   point to that structure.
 */
#ifdef LOGNEW
$(stat)int real_fscan_$t_list( FILE *f, $t_list *p, const char *_f, const int _l )
#else
$(stat)int fscan_$t_list( FILE *f, $t_list *p )
#endif
{
    int n;
    int c;
    $t nw;

    *p = new_$t_list();
    n = tm_fscanopenbrac( f );
    if( tm_fneedc( f, '[' ) ){
	return 1;
    }
    if( tm_fscanspace( f ) ){
	return 1;
    }
    c = getc( f );
    if( c == EOF ){
	(void) strcpy( tm_errmsg, tm_badeof );
	return 1;
    }
    if( c == ']' ){
	return 0;
    }
    (void) ungetc( c, f );
    for(;;){
	if( fscan_$t( f, &nw ) ){
	    return 1;
	}
	*p = append_$t_list( *p, nw );
	if( tm_fscanspace( f ) ){
	    return 1;
	}
	c = getc( f );
	if( c == EOF ){
	    (void) strcpy( tm_errmsg, tm_badeof );
	    return 1;
	}
	if( c != ',' ){
	    (void) ungetc( c, f );
	    break;
	}
    }
    if( tm_fneedc( f, ']' ) ){
	return 1;
    }
    return tm_fscanclosebrac( f, n );
}

.endforeach
.if $(statcode)
/*********************************************************
 *    Statistics printing routines                       *
 *********************************************************/

.if ${member stat_$(basename) $(want_misc)}
.set stat
.else
.set stat "static "
.endif
/* Print statistics to the given file handle. */
void stat_$(basename)( FILE *f )
{
.if ${len $(need_stat) $(need_stat_list)}
    char tm_allocfreed[] = "%-20s: %6ld allocated, %6ld freed.%s\n";

.endif
.foreach t ${sort $(need_stat)}
    fprintf(f,tm_allocfreed,"$t",newcnt_$t,frecnt_$t,((newcnt_$t==frecnt_$t)? "": "<-"));
.endforeach
.foreach t ${sort $(need_stat_list)}
    fprintf(
	f,
	tm_allocfreed,
	"$t_list",
	newcnt_$t_list,
	frecnt_$t_list,
	((newcnt_$t_list==frecnt_$t_list)? "": "<-")
    );
.endforeach
}

.endif
.if ${member get_balance_$(basename) $(need_misc)}
/* Return -1 if there is a structure that has freed more than allocated, or
 * else return 1 if there is a structure that has been freed less than
 * allocated, or else return 0.
 */
int get_balance_$(basename)( void )
{
    int res;

    res = 0;
    /* Check for too many fre()s. */
.foreach t $(need_stat_list)
    if( newcnt_$t_list<frecnt_$t_list ){
        return -1;
    }
.endforeach
.foreach t $(need_stat)
    if( newcnt_$t<frecnt_$t ){
        return -1;
    }
.endforeach
    /* Check for too few free()s. */
.foreach t $(need_stat_list)
    if( newcnt_$t_list>frecnt_$t_list ){
        res = 1;
    }
.endforeach
.foreach t $(need_stat)
    if( newcnt_$t>frecnt_$t ){
        res = 1;
    }
.endforeach
    return res;
}

.endif
/* ---- end of ${tplfilename} ---- */
/* Code generation required ${processortime} milliseconds. */
